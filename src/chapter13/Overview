ПОТОКОВЫЙ ВВ - package Java io
БУФЕРНЫЙ ВВ - package Java nio
КАНАЛЬНЫЙ ВВ - package Java nio

Поток ввода-вывода это абстракция, которая поставляет или потребляет информацию
Поток ВВ связан с ФИЗИЧЕСКИМ устройством через СИСТЕМУ ВВ в JAVA
Для ПВвода без разницы это файл на диске, клавиатура или сетевое соединение
Для ПВывода без разницы это консоль, файл или сетевое соединение

Два вида ПВВ:
  -- байтовый (на вершине иерархии два абстрактных класса InputStream (abstract method read()) and OutputStream(abstract method write ()))
  -- символьный (на вершине иерархии два абстрактных класса Reader and Writer)

Предопределенные ПВВ:
- java.lang автоматически импортируемый пакет
- в этом пакете определен класс System, инкапсулирующий некоторые свойства исполняющей среды java
- класс System содержит три переменные предопределенных ПВВ in, out, err: public static final
- System.out - ссылается на стандартный поток вывода, по умолчанию это консоль. Содержит объект типа PrintStream
- System.in  - ссылается на стандартный поток ввода, по умолчанию это клавиатура. Содержит объект типа InputStream
- System.err - ссылается на стандартный поток вывода, по умолчанию это консоль. Содержит объект типа PrintStream

Чтение данных с консоли:
Ввод в консоль - чтение из стандартного ПВ System.in (object InputStream)
Но это байты, а нам нужны символы: воспользуемся BufferedReader(Reader поток_чтения_вводимых_данных)
Reader - абстрактный класс на вершине иерархии символьного ПВВ
Реализующий данный абстрактный класс и преобразующий байты в символы - InputStreamReader(InputStream поток_ввода)
поток_ввода - это как раз ввод в консоль System.in
Полная запись:
BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

System.in - стандартный поток ввода буферизированный построчно.
Данные будут введены только после нажатия клавиши Enter.

/////Чтение и запись данных в файлы/////
Чаще всего используются классы, которые связывают потоки ввода вывода байтов с файлами:
  -- FileInputStream
  -- FileOutputStream

Открываем файл для ввода-вывода (создаем поток ввода-вывода) <-- Создаем объект одного из класса,
указав имя файла в качестве аргумента.

FileInputStream(String имя_файла) throws FileNotFoundException
FileOutputStream(String имя_файла) throws FileNotFoundException

Когда файл открыт для вывода любой другой файл под тем же самым именем уничтожается.

Если файл не существует, или его нельзя открыть, или создать,
то генерируется исключение FileNotFoundException производное от класса IOException
Если присутствует диспетчер защиты и при открытии файла обнаруживается нарушение защиты,
то генерируется исключение типа SecurityException

Обязательно закрывать файл после завершения работы с файлами.
void close() throws IOException

JDK7 -- close() <-- interface AutoCloseable (java.lang) <-- interface Closeable (java.io)

Два способа закрытия файла:
  -- явно
  -- начиная с версии JDK 7, try с ресурсами

/////Чтение из файла/////

int read() throws IOException

/////Запись в файл/////

void write(int байтовое_значение) throws IOException

/////Автоматическое закрытие файла/////

Ресурс - пооток ввода-вывода в файл.
Работает только с ресурсами, которые реализуют интерфейс AutoCloseable (java.lang) --> Closeable (java.io)
Ресурс ограничен блоком try

try (спецификация_ресурса) {
    // использование ресурса
}






